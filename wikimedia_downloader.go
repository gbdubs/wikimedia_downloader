package wikimedia_downloader

import (
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/gbdubs/attributions"
)

type Input struct {
	WikimediaFileName string // Should be of the form File:Piranga_ludoviciana_map.svg
	OutputFilePath    string // Optional. Will be set to something in /out/wikimedia_downloader if not set.
}

type Output struct {
	File attributions.AttributedFilePointer
}

const url = "https://en.wikipedia.org/w/api.php"

func (input *Input) Execute() (*Output, error) {
	output := &Output{}

	suffix := strings.Split(input.WikimediaFileName, ".")[1]
	outputFilePath := input.OutputFilePath
	if outputFilePath == "" {
		outputFilePath = "/out/wikimedia_downloader/" + strconv.FormatInt(time.Now().Unix(), 10) + "." + suffix
	}
	err := os.MkdirAll(filepath.Dir(outputFilePath), 0777)
	if err != nil {
		return output, err
	}

	// Used Wikipedia's API Sandbox https://en.wikipedia.org/wiki/Special:ApiSandbox
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return output, err
	}
	q := req.URL.Query()
	q.Add("action", "query")
	q.Add("prop", "imageinfo|info")
	q.Add("inprop", "url")
	q.Add("iiprop", "timestamp|user|extmetadata|url|userid")
	q.Add("format", "xml")
	q.Add("iimetadataversion", "1")
	q.Add("titles", input.WikimediaFileName)
	req.URL.RawQuery = q.Encode()
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return output, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != 200 {
		return output, errors.New(fmt.Sprintf("Request failed: %d %s", resp.StatusCode, resp.Status))
	}
	asBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return output, err
	}
	var parsedResponse api
	err = xml.Unmarshal(asBytes, &parsedResponse)
	if err != nil {
		return output, err
	}
	attribution, err := parsedResponse.ToAttribution()
	if err != nil {
		return output, err
	}

	dReq, err := http.NewRequest("GET", parsedResponse.Query.Pages.Page.Imageinfo.Ii.URL, nil)
	if err != nil {
		return output, err
	}
	dResp, err := http.DefaultClient.Do(dReq)
	if err != nil {
		return output, err
	}
	if dResp.StatusCode != 200 {
		return output, errors.New(fmt.Sprintf("Request failed: %s %d %s %+v", dReq.URL, dResp.StatusCode, dResp.Status, dResp))
	}
	defer dResp.Body.Close()
	out, err := os.OpenFile(outputFilePath, os.O_CREATE|os.O_RDWR, 0777)
	if err != nil {
		return output, err
	}
	defer out.Close()
	_, err = io.Copy(out, dResp.Body)
	if err != nil {
		return output, err
	}
	afp, err := attributions.AttributeLocalFile(outputFilePath, attribution)
	if err != nil {
		return output, err
	}
	output.File = afp
	return output, nil
}

func (a api) ToAttribution() (attributions.Attribution, error) {
	i := a.Query.Pages.Page.Imageinfo.Ii
	createdAt, err := time.Parse("2006-01-02 15:04:05", i.Extmetadata.DateTime.Value)
	if err != nil {
		return attributions.Attribution{}, err
	}
	return attributions.Attribution{
		OriginUrl:           i.URL,
		CollectedAt:         time.Now(),
		OriginalTitle:       i.Extmetadata.ObjectName.Value,
		Author:              i.User,
		AuthorUrl:           i.Extmetadata.Artist.Value,
		License:             i.Extmetadata.UsageTerms.Value,
		LicenseUrl:          i.Extmetadata.LicenseUrl.Value,
		CreatedAt:           createdAt,
		Context:             []string{i.Extmetadata.ImageDescription.Value},
		ScrapingMethodology: "github.com/gbdubs/wikimedia_downloader",
	}, nil
}

// Auto Generated by https://www.onlinetool.io/xmltogo/
// CHEF'S KISS!!!!!
type api struct {
	XMLName       xml.Name `xml:"api"`
	Text          string   `xml:",chardata"`
	Batchcomplete string   `xml:"batchcomplete,attr"`
	Query         struct {
		Text  string `xml:",chardata"`
		Pages struct {
			Text string `xml:",chardata"`
			Page struct {
				Text                 string `xml:",chardata"`
				Idx                  string `xml:"_idx,attr"`
				Ns                   string `xml:"ns,attr"`
				Title                string `xml:"title,attr"`
				Missing              string `xml:"missing,attr"`
				Known                string `xml:"known,attr"`
				Imagerepository      string `xml:"imagerepository,attr"`
				Contentmodel         string `xml:"contentmodel,attr"`
				Pagelanguage         string `xml:"pagelanguage,attr"`
				Pagelanguagehtmlcode string `xml:"pagelanguagehtmlcode,attr"`
				Pagelanguagedir      string `xml:"pagelanguagedir,attr"`
				Fullurl              string `xml:"fullurl,attr"`
				Editurl              string `xml:"editurl,attr"`
				Canonicalurl         string `xml:"canonicalurl,attr"`
				Displaytitle         string `xml:"displaytitle,attr"`
				Imageinfo            struct {
					Text string `xml:",chardata"`
					Ii   struct {
						Text                string `xml:",chardata"`
						Timestamp           string `xml:"timestamp,attr"`
						User                string `xml:"user,attr"`
						Userid              string `xml:"userid,attr"`
						Canonicaltitle      string `xml:"canonicaltitle,attr"`
						URL                 string `xml:"url,attr"`
						Descriptionurl      string `xml:"descriptionurl,attr"`
						Descriptionshorturl string `xml:"descriptionshorturl,attr"`
						Metadata            struct {
							Text     string `xml:",chardata"`
							Metadata []struct {
								Text      string `xml:",chardata"`
								Name      string `xml:"name,attr"`
								AttrValue string `xml:"value,attr"`
								Value     string `xml:"value"`
							} `xml:"metadata"`
						} `xml:"metadata"`
						Extmetadata struct {
							Text     string `xml:",chardata"`
							DateTime struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"DateTime"`
							ObjectName struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"ObjectName"`
							CommonsMetadataExtension struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"CommonsMetadataExtension"`
							Categories struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"Categories"`
							Assessments struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"Assessments"`
							ImageDescription struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
							} `xml:"ImageDescription"`
							DateTimeOriginal struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
							} `xml:"DateTimeOriginal"`
							Credit struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"Credit"`
							Artist struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
							} `xml:"Artist"`
							LicenseShortName struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"LicenseShortName"`
							UsageTerms struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"UsageTerms"`
							AttributionRequired struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"AttributionRequired"`
							LicenseUrl struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"LicenseUrl"`
							Copyrighted struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"Copyrighted"`
							Restrictions struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"Restrictions"`
							License struct {
								Text   string `xml:",chardata"`
								Value  string `xml:"value,attr"`
								Source string `xml:"source,attr"`
								Hidden string `xml:"hidden,attr"`
							} `xml:"License"`
						} `xml:"extmetadata"`
					} `xml:"ii"`
				} `xml:"imageinfo"`
			} `xml:"page"`
		} `xml:"pages"`
		Rightsinfo struct {
			Text     string `xml:",chardata"`
			URL      string `xml:"url,attr"`
			AttrText string `xml:"text,attr"`
		} `xml:"rightsinfo"`
	} `xml:"query"`
}
